#!/usr/bin/env python2
import sys
import math

def problem_1():
    """
        If we list all the natural numbers below 10 that are multiples of 3 or 5, 
        we get 3, 5, 6 and 9. The sum of these multiples is 23.

        Find the sum of all the multiples of 3 or 5 below 1000
    """

    x = range(1000)
    items = [v for v in x if v % 5 == 0 or v % 3 == 0]
    print sum(items)

def problem_2():
    """
        Each new term in the Fibonacci sequence is generated by adding the 
        previous two terms. By starting with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not 
        exceed four million, find the sum of the even-valued terms.
    """

    x0, x1 = 1, 1

    even_sum = 0
    while(x0<4000000):
        if (x0 % 2 == 0):
            even_sum += x0
        x0, x1 = x1, x0 + x1

    print even_sum

def problem_3():
    """
        The prime factors of 13195 are 5, 7, 13 and 29.
        What is the largest prime factor of the number 600851475143 ?
    """

    n = 600851475143
    upper_limit = int(math.sqrt(n))
    sieve = range(1, upper_limit)

    def is_prime(x):
        if x % 2 == 0:
            return False
        for i in range(3, x, 2):
            if x % i == 0:
                return False
        return True

    factors = list()

    for x in sieve: 
        if n%x==0:
            factors.append(x)

    print [f for f in factors if is_prime(f)][-1]

def problem_4():
    """
        A palindromic number reads the same both ways. The largest palindrome 
        made from the product of two 2-digit numbers is 9009 = 91  99.

        Find the largest palindrome made from the product of two 3-digit numbers.
    """

    def is_palindromic(x):
        x = str(x)
        mid = len(x)/2
        left = x[0:mid]
        if (len(x)%2==0):
            right = x[mid:]
        else:
            right = x[mid+1:]

        if left == right[::-1]:
            return True

        return False

    def check_3digits():
        palindromes = list()
        for x in range(1000, 100, -1):
            for y in range(1000, 100, -1):
                valid = is_palindromic(x*y)
                if valid:
                    palindromes.append(x*y)
        return max(palindromes)

    print check_3digits()

def problem_9():
    """
        A Pythagorean triplet is a set of three natural numbers, a  b  c, for which,
            a2 + b2 = c2
            For example, 32 + 42 = 9 + 16 = 25 = 52.
        There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        Find the product abc
    """

    # Since a < b < c then max of a or b would be under 500 at most
    a_s, b_s = range(1, 500), range(1, 500)

    for a in a_s:
        for b in b_s:
            c = 1000 - a - b
            if a < b < c:
                valid = a**2+b**2 == c**2
                if valid:
                    print "FOUND IT %d %d %d" % (a, b, c)
                    break

if __name__=='__main__':
    try:
        number = sys.argv[1]
    except IndexError:
        number = 1

    try:
        locals()['problem_%s' % number]()
    except KeyError:
        sys.exit("I've not done that yet!")