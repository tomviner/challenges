#!/usr/bin/env python2
import sys
import math

def problem_1():
    """
        If we list all the natural numbers below 10 that are multiples of 3 or 5, 
        we get 3, 5, 6 and 9. The sum of these multiples is 23.

        Find the sum of all the multiples of 3 or 5 below 1000
    """

    x = range(1000)
    items = [v for v in x if v % 5 == 0 or v % 3 == 0]
    print sum(items)

def problem_2():
    """
        Each new term in the Fibonacci sequence is generated by adding the 
        previous two terms. By starting with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not 
        exceed four million, find the sum of the even-valued terms.
    """

    x0, x1 = 1, 1

    even_sum = 0
    while(x0<4000000):
        if (x0 % 2 == 0):
            even_sum += x0
        x0, x1 = x1, x0 + x1

    print even_sum

def problem_3():
    """
        The prime factors of 13195 are 5, 7, 13 and 29.
        What is the largest prime factor of the number 600851475143 ?
    """

    n = 600851475143
    upper_limit = int(math.sqrt(n))
    sieve = range(1, upper_limit)

    def is_prime(x):
        if x % 2 == 0:
            return False
        for i in range(3, x, 2):
            if x % i == 0:
                return False
        return True

    factors = list()

    for x in sieve: 
        if n%x==0:
            factors.append(x)

    print [f for f in factors if is_prime(f)][-1]

def problem_4():
    """
        A palindromic number reads the same both ways. The largest palindrome 
        made from the product of two 2-digit numbers is 9009 = 91  99.

        Find the largest palindrome made from the product of two 3-digit numbers.
    """

    def is_palindromic(x):
        x = str(x)
        mid = len(x)/2
        left = x[0:mid]
        if (len(x)%2==0):
            right = x[mid:]
        else:
            right = x[mid+1:]

        if left == right[::-1]:
            return True

        return False

    def check_3digits():
        palindromes = list()
        for x in range(1000, 100, -1):
            for y in range(1000, 100, -1):
                valid = is_palindromic(x*y)
                if valid:
                    palindromes.append(x*y)
        return max(palindromes)

    print check_3digits()

def problem_6():
    """
        The sum of the squares of the first ten natural numbers is,
            12 + 22 + ... + 102 = 385

        The square of the sum of the first ten natural numbers is,
            (1 + 2 + ... + 10)2 = 552 = 3025

        Hence the difference between the sum of the squares of the first ten
        natural numbers and the square of the sum is 3025  385 = 2640. Find the
        difference between the sum of the squares of the first one hundred
        natural numbers and the square of the sum.
    """

    bases = range(1, 101)
    sum_squares = sum([x**2 for x in bases])
    square_sum = sum(bases)**2

    print abs(sum_squares - square_sum)

def problem_8():
    """
        Find the greatest product of five consecutive digits in the 1000-digit number.
    """
    NUM = """
        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450
    """

    num = ''.join([x.strip() for x in NUM.split('\n') if x])
    # For greatest product we want the part of the number that has the 5 biggest
    # digits grouped. We need to avoid including a range with a 0 in it though!
    parts = [num[x:x+5] for x in range(len(num)-5) if '0' not in num[x:x+5]]
    parts.sort()
    max_nums = parts[-1]
    print reduce(lambda x, y: x*y, [int(x) for x in max_nums])

def problem_9():
    """
        A Pythagorean triplet is a set of three natural numbers, a  b  c, for which,
            a2 + b2 = c2
            For example, 32 + 42 = 9 + 16 = 25 = 52.
        There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        Find the product abc
    """

    # Since a < b < c then max of a or b would be under 500 at most
    a_s, b_s = range(1, 500), range(1, 500)

    for a in a_s:
        for b in b_s:
            c = 1000 - a - b
            if a < b < c:
                valid = a**2+b**2 == c**2
                if valid:
                    print "%d (%d, %d, %d)" % (a*b*c, a, b, c)
                    break

if __name__=='__main__':
    try:
        number = sys.argv[1]
    except IndexError:
        number = 1

    try:
        locals()['problem_%s' % number]()
    except KeyError:
        sys.exit("I've not done that yet!")